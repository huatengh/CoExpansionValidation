species.assignment<-assign_species_to_events(species = species,nco.events = coevents,even = F)
coevents<-length(species.assignment)
time.range<-c(30000,50000)
buffer<-5000
exp.time<-generate_cotime_with_buffer(time.range = time.range,nco.events =coevents,buffer =  buffer)
exp.time
#setting prefix is important
#temporary folders will be created for holding BayeSSC intermediate results
#these folders are named prefix+row number in conf
#the resulted "observed data" will return and write to a outfile
#named prefix_obs_file
#and the sampled configuration will be write into prefix_conf_file for records
#if conf already contain the eventtime.generation column
#species.assignment and exp.time can be skipped
#Set intern=FALSE if you want to check the screen output of BayeSCC
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = path_to_bayessc,conf = conf,prefix = 'temp',species.assignment = species.assignment,exp.time = exp.time,intern=F)
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = path_to_bayessc,conf = conf,prefix = 'temp',species.assignment = species.assignment,exp.time = exp.time,intern=F)
warnings()
load_all()
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = path_to_bayessc,conf = conf,prefix = 'temp',species.assignment = species.assignment,exp.time = exp.time,intern=F)
load_all()
obsfile<-"temp_obs_file"
obs<-read.table(obsfile,sep="\t",header=T,stringsAsFactors = F)
hyperstat<-calculate_hyperstat(obs)
i<-1
alpha<-rgamma(1,shape = concentrationShape,scale = concentrationscale)
event<-generate_coevent_number_dirichlet(species = species,alpha = a)
event<-generate_coevent_number_dirichlet(species = species,alpha = alpha)
exp.time<-generate_cotime_with_buffer(time.range = time.range,nco.events = length(event),buffer = buffer)
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = BayeSSCallocation,conf = conf,prefix = paste0('temp',i),species.assignment = event,exp.time = exp.time,intern=F)
BayeSSCallocation=path_to_bayessc
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = BayeSSCallocation,conf = conf,prefix = paste0('temp',i),species.assignment = event,exp.time = exp.time,intern=F)
load_all()
load_all()
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = BayeSSCallocation,conf = conf,prefix = paste0('temp',i),species.assignment = event,exp.time = exp.time,intern=F)
simulatehyperstat<-calculate_hyperstat(simulatedobs)
head(simulatedobs)
load_all()
simulatehyperstat<-calculate_hyperstat(simulatedobs)
obs<-simulatedobs
col<-c("Haptypes","HapDiver","nucdiv","TajimasD","F\\.$","pairdiffs","SegSites")
colnum<-sapply(col,function(i)grep(i,colnames(obs),ignore.case = T))
colnum
colnames(obs)
col<-c("Haptypes","HapDiver","nucdiv","TajimasD","F\\*","pairdiffs","SegSites")
colnum<-sapply(col,function(i)grep(i,colnames(obs),ignore.case = T))
load_all()
simulatehyperstat<-calculate_hyperstat(simulatedobs)
col<-c("Haptypes","HapDiver","nucdiv","TajimasD","F\\*","pairdiffs","SegSites")
colnum<-sapply(col,function(i)grep(i,colnames(obs),ignore.case = T))
for(i in colnum) obs[,i]<-as.numeric(obs[,i])
obs
obs<-as.data.frame(obs)
for(i in colnum) obs[,i]<-as.numeric(obs[,i])
newcol<-c("haptypes","hapdiv","nucdiv","tajimasD","fusf","pairdiffs","segSites")
x<-sapply(1:length(col),function(i)mean_var_skewness_kurtosis(obs[,colnum[i]]))
load_all()
simulatehyperstat<-calculate_hyperstat(simulatedobs)
load_all()
simulatehyperstat<-calculate_hyperstat(simulatedobs)
simulatehyperstat[1]<-paste0(prefix,i)
prefix='temp'
simulatehyperstat[1]<-paste0(prefix,i)
simulatehyperstat[2]<-length(exp.time)
simulatehyperstat[3]<-nspecies
simulatehyperstat
prefix
paste0(prefix,i)
i
npod<-10
x<-sapply(1:npod,function(i)fx(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation))
fx<-function(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation){
species<-as.character(unique(conf$species))
nspecies<-length(species)
alpha<-rgamma(1,shape = concentrationShape,scale = concentrationscale)
event<-generate_coevent_number_dirichlet(species = species,alpha = alpha)
exp.time<-generate_cotime_with_buffer(time.range = time.range,nco.events = length(event),buffer = buffer)
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = BayeSSCallocation,conf = conf,prefix = paste0(prefix,i),species.assignment = event,exp.time = exp.time)
simulatehyperstat<-calculate_hyperstat(simulatedobs)
simulatehyperstat[1]<-paste0(prefix,i)
simulatehyperstat[2]<-length(exp.time)
simulatehyperstat[3]<-nspecies
return(simulatehyperstat)
}
x<-sapply(1:npod,function(i)fx(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation))
buffer<-500
x<-sapply(1:npod,function(i)fx(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation))
head(x)
x<-t(x)
head(x)
do.parallel<-2
cluster <- parallel::makeCluster(do.parallel)
x<-
parallel::stopCluster(cluster)
?parLApply
?parLapply
cluster <- parallel::makeCluster(do.parallel)
npod
x<-parLapply(cluster, X = 1:npod, fx, conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation)
clusterExport(cl = cluster, varlist=c("generate_coevent_number_dirichlet","runbayeSCC_with_conf","calculate_hyperstat"), envir = .GlobalEnv)
x<-parLapply(cluster, X = 1:npod, fx, conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation)
clusterExport(cl = cluster, varlist=c("generate_coevent_number_dirichlet","generate_cotime_with_buffer","runbayeSCC_with_conf","calculate_hyperstat"), envir = .GlobalEnv)
x<-parLapply(cluster, X = 1:npod, fx, conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation)
lsf.str()
load_all()
lsf.str(envir = package:CoExpansionValidation)
lsf.str(envir = "package:CoExpansionValidation")
lsf.str("package:CoExpansionValidation")
ls("package:CoExpansionValidation")
clusterExport(cl = cluster, varlist=ls("package:CoExpansionValidation"))
x<-parLapply(cluster, X = 1:npod, fx, conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation)
parallel::stopCluster(cluster)
x
do.parallel=3
cluster <- parallel::makeCluster(do.parallel)
clusterExport(cl = cluster, varlist=ls("package:CoExpansionValidation"))
x<-parSapply(cluster, X = 1:npod, fx, conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation)
x
path_to_bayessc="BayeSSC.exe"
concentrationShape=20.0
concentrationscale=0.15
time.range<-c(30000,50000)
buffer<-500
npod<-10
configurefile<-'test.conf'
conf<-read.table(configurefile,header=T,sep="\t",stringsAsFactors = F)
load_all()
reference.table<-ABC_simulation_with_conf(npod=npod,conf=conf,time.range=time.range,buffer=buffer,concentrationscale=concentrationscale,concentrationShape=concentrationShape,BayeSSCallocation=path_to_bayessc,prefix='temp',do.parallel=2)
reference.table
load_all()
unlist(species.assignment)
#save these hyperstat with the simulated expansion time for species
species.time<-rep(0,length(species))
for(i in 1:length(species.assignment))species.time[species.assignment[[i]]]<-exp.time[i]
species.time
table(species.time)
species.assignment
obsfile<-"temp_obs_file"
obs<-read.table(obsfile,sep="\t",header=T,stringsAsFactors = F)
hyperstat<-calculate_hyperstat(obs)
obs
load_all()
hyperstat<-calculate_hyperstat(obs)
#save these hyperstat with the simulated expansion time for species
species.time<-rep(0,length(species))
for(i in 1:length(species.assignment))species.time[species.assignment[[i]]]<-exp.time[i]
hyperstat<-c("temp",length(exp.time),length(species),species.time,hyperstat)
event
load_all()
path_to_bayessc="BayeSSC.exe"
concentrationShape=20.0
concentrationscale=0.15
time.range<-c(30000,50000)
buffer<-500
npod<-10
configurefile<-'test.conf'
conf<-read.table(configurefile,header=T,sep="\t",stringsAsFactors = F)
reference.table<-ABC_simulation_with_conf(npod=npod,conf=conf,time.range=time.range,buffer=buffer,concentrationscale=concentrationscale,concentrationShape=concentrationShape,BayeSSCallocation=path_to_bayessc,prefix='temp',do.parallel=2)
reference.table
a<-rep(0,3)
a[1]<-paste0(prefix,i)
a[2]<-length(exp.time)
a[3]<-nspecies
a
species.time<-rep(0,nspecies)
for(j in 1:length(event))species.time[event[[j]]]<-exp.time[j]
species.time
fx<-function(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation){
species<-as.character(unique(conf$species))
nspecies<-length(species)
alpha<-rgamma(1,shape = concentrationShape,scale = concentrationscale)
event<-generate_coevent_number_dirichlet(species = species,alpha = alpha)
exp.time<-generate_cotime_with_buffer(time.range = time.range,nco.events = length(event),buffer = buffer)
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = BayeSSCallocation,conf = conf,prefix = paste0(prefix,i),species.assignment = event,exp.time = exp.time)
simulatehyperstat<-calculate_hyperstat(simulatedobs)
a<-rep(0,3)
a[1]<-paste0(prefix,i)
a[2]<-length(exp.time)
a[3]<-nspecies
species.time<-rep(0,nspecies)
for(j in 1:length(event))species.time[event[[j]]]<-exp.time[j]
a<-c(a,species.time)
simulatehyperstat<-c(a,simulatehyperstat)
return(simulatehyperstat)
}
i<-1
fx(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation)
species<-as.character(unique(conf$species))
nspecies<-length(species)
alpha<-rgamma(1,shape = concentrationShape,scale = concentrationscale)
event<-generate_coevent_number_dirichlet(species = species,alpha = alpha)
exp.time<-generate_cotime_with_buffer(time.range = time.range,nco.events = length(event),buffer = buffer)
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = BayeSSCallocation,conf = conf,prefix = paste0(prefix,i),species.assignment = event,exp.time = exp.time)
simulatehyperstat<-calculate_hyperstat(simulatedobs)
a<-rep(0,3)
a[1]<-paste0(prefix,i)
a[2]<-length(exp.time)
a[3]<-nspecies
a
species.time<-rep(0,nspecies)
for(j in 1:length(event))species.time[event[[j]]]<-exp.time[j]
a<-c(a,species.time)
a
species.time
species.time<-rep(0,nspecies)
event
species.time<-rep(0,nspecies)
species.time
for(j in 1:length(event))species.time[event[[j]]]<-exp.time[j]
species.time
j<-1
event[[j]]
fx(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation)
fx<-function(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation){
species<-as.character(unique(conf$species))
nspecies<-length(species)
alpha<-rgamma(1,shape = concentrationShape,scale = concentrationscale)
event<-generate_coevent_number_dirichlet(species = species,alpha = alpha)
exp.time<-generate_cotime_with_buffer(time.range = time.range,nco.events = length(event),buffer = buffer)
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = BayeSSCallocation,conf = conf,prefix = paste0(prefix,i),species.assignment = event,exp.time = exp.time)
simulatehyperstat<-calculate_hyperstat(simulatedobs)
a<-rep(0,3)
a[1]<-paste0(prefix,i)
a[2]<-length(exp.time)
a[3]<-nspecies
species.time<-rep(0,nspecies)
for(j in 1:length(event))species.time[as.integer(event[[j]])]<-exp.time[j]
a<-c(a,species.time)
simulatehyperstat<-c(a,simulatehyperstat)
return(simulatehyperstat)
}
fx(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation)
species.time<-sapply(1:length(event),function(j)rep(exp.time[j],length(event[[j]])))
species.time<-unlist(sapply(1:length(event),function(j)rep(exp.time[j],length(event[[j]]))))
species.time
a<-rep(0,3)
a[1]<-paste0(prefix,i)
a[2]<-length(exp.time)
a[3]<-nspecies
species.time<-unlist(sapply(1:length(event),function(j)rep(exp.time[j],length(event[[j]]))))
a<-c(a,species.time)
names(a)<-c("uid","nevent","nspecies",unlist(event))
a
a<-rep(0,3)
a[1]<-paste0(prefix,i)
a[2]<-length(exp.time)
a[3]<-nspecies
names(a)<-c("uid","nevent","nspecies")
species.time<-unlist(sapply(1:length(event),function(j)rep(exp.time[j],length(event[[j]]))))
names(species.time)<-unlist(event)
species.time<-species.time[order(names(species.time))]
a<-c(a,species.time)
a
fx<-function(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation){
species<-as.character(unique(conf$species))
nspecies<-length(species)
alpha<-rgamma(1,shape = concentrationShape,scale = concentrationscale)
event<-generate_coevent_number_dirichlet(species = species,alpha = alpha)
exp.time<-generate_cotime_with_buffer(time.range = time.range,nco.events = length(event),buffer = buffer)
simulatedobs<-runbayeSCC_with_conf(BayeSSCallocation = BayeSSCallocation,conf = conf,prefix = paste0(prefix,i),species.assignment = event,exp.time = exp.time)
simulatehyperstat<-calculate_hyperstat(simulatedobs)
a<-rep(0,3)
a[1]<-paste0(prefix,i)
a[2]<-length(exp.time)
a[3]<-nspecies
names(a)<-c("uid","nevent","nspecies")
species.time<-unlist(sapply(1:length(event),function(j)rep(exp.time[j],length(event[[j]]))))
names(species.time)<-unlist(event)
species.time<-species.time[order(names(species.time))]
a<-c(a,species.time)
simulatehyperstat<-c(a,simulatehyperstat)
return(simulatehyperstat)
}
fx(i,conf,time.range,buffer,concentrationscale,concentrationShape,prefix,BayeSSCallocation)
load_all()
obsfile<-"temp_obs_file"
obs<-read.table(obsfile,sep="\t",header=T,stringsAsFactors = F)
hyperstat<-calculate_hyperstat(obs)
#save these hyperstat with the simulated expansion time for species
a<-rep(0,3)
a[1]<-paste0('temp',i)
a[2]<-length(exp.time)
a[3]<-length(species)
names(a)<-c("uid","nevent","nspecies")
species.time<-unlist(sapply(1:length(species.assignment),function(j)rep(exp.time[j],length(species.assignment[[j]]))))
names(species.time)<-unlist(species.assignment)
species.time<-species.time[order(names(species.time))]
a<-c(a,species.time)
hyperstat<-c(a,hyperstat)
hyperstat
path_to_bayessc="BayeSSC.exe"
concentrationShape=20.0
concentrationscale=0.15
time.range<-c(30000,50000)
buffer<-500
npod<-10
configurefile<-'test.conf'
conf<-read.table(configurefile,header=T,sep="\t",stringsAsFactors = F)
reference.table<-ABC_simulation_with_conf(npod=npod,conf=conf,time.range=time.range,buffer=buffer,concentrationscale=concentrationscale,concentrationShape=concentrationShape,BayeSSCallocation=path_to_bayessc,prefix='temp',do.parallel=2)
reference.table
path_to_bayessc="BayeSSC.exe"
concentrationShape=20.0
concentrationscale=0.15
time.range<-c(30000,50000)
buffer<-500
npod<-100
bayessc_par_file<-'BayeSSCtemplate.par'
nloci<-10
species<-1:10
gen<-1 # or can be a vector with one generation time for each species
conf<-par_to_config(bayessc_par_file,species,nloci,gen)
reference.table<-ABC_simulation_with_conf(npod=npod,conf=conf,time.range=time.range,buffer=buffer,concentrationscale=concentrationscale,concentrationShape=concentrationShape,BayeSSCallocation=path_to_bayessc,prefix='temp',do.parallel=2)
install.packages("VGAM")
install.packages("locfit")
install.packages("abc")
load_all()
load_all()
load_all()
load_all()
path_to_msreject<-"./msReject"
samplingtolerance<-0.5 #just toy example, should be much smaller for real runs
prefix<-'temp'
MsRejectallocation=path_to_msrejec
MsRejectallocation=path_to_msreject
outfile<-paste0(prefix,"_hyperstat_file")
cat(paste(hyperstat,sep='',collapse = "\t"),"\n",sep='',file = outfile)
outfile<-paste0(prefix,"_reference_table")
write.table(reference.table,file=outfile,sep="\t",col.names = F,rrow.names = F,quote=F)
write.table(reference.table,file=outfile,sep="\t",col.names = F,row.names = F,quote=F)
colnames(hyperstat)
names(hyperstat)
colnum<-grep("haptypes_Mean",names(hyperstat)):grep("fusf_Kurtosis",names(hyperstat))
column
ccolnum
colnum
col.names(reference.table)
colnames(reference.table)
colnum<-grep("haptypes_Mean",names(hyperstat)):grep("tajimasD_Kurtosis",names(hyperstat))
colnum
command<-paste(MsRejectallocation,hsfile,reffile, samplingtolerance,paste(colnum,sep='',collapse = ' '),">", outposteriorname, sep=' ')
hsfile<-paste0(prefix,"_hyperstat_file")
cat(paste(hyperstat,sep='',collapse = "\t"),"\n",sep='',file = hsfile)
reffile<-paste0(prefix,"_reference_table")
write.table(reference.table,file=reffile,sep="\t",col.names = F,row.names = F,quote=F)
outposteriorname<-sub("hyperstat_file","Posterior",hsfile)
colnum<-grep("haptypes_Mean",names(hyperstat)):grep("tajimasD_Kurtosis",names(hyperstat))
command<-paste(MsRejectallocation,hsfile,reffile, samplingtolerance,paste(colnum,sep='',collapse = ' '),">", outposteriorname, sep=' ')
cat(command)
posteriortable<-read(outposteriorname,sep="\t")
posteriortable<-read.table(outposteriorname,sep="\t")
posteriortable
colnames(posteriortable)<-colnames(reference.table)
load_all()
posterior<-run_msreject(hyperstat=hyperstat,reference.table=reference.table,MsRejectallocation=path_to_msreject,samplingtolerance=samplingtolerance,prefix=prefix)
head(posterior[,1:5])
ranprior[,4]
?abc
POSTVEC32<- posterior[,c(14:29)]
head(POSTVEC32)
OBS<-hyperstat[c(14:29)]
OBS
ZVALUE32 <- posterior[,2]
dim(POSTVEC32)
ZVALUE32_LL <- abc(OBS, ZVALUE32, POSTVEC32, tol=0.2,method="loclinear")
library(abc)
ZVALUE32_LL <- abc(OBS, ZVALUE32, POSTVEC32, tol=0.2,method="loclinear")
head(OBS)
OBS<-as.numeric(hyperstat[c(14:29)])
ZVALUE32_LL <- abc(OBS, ZVALUE32, POSTVEC32, tol=0.2,method="loclinear")
ZVALUE32_LL <- abc(OBS, ZVALUE32, POSTVEC32, tol=0.8,method="loclinear")
ZVALUE32_LL$adj.values
nspecies<-length(species)
backtrans_z <- function(val){
val <- val*nspecies
if(val <= 0.5) {out <- 0}
else if((nspecies-0.5) < val) {out <- nspecies}
else {out <- round(val,digit=0)}
out <- out/nspecies
return(out)
}
ZVALUE32_BT <- sapply(ZVALUE32_LL$adj.values,backtrans_z)
ZVALUE32_BT_mode <- loc1stats(ZVALUE32_BT, prob=0.95)[1]
?loc1stats
??loc1stats
library(VGAM)
library(locfit)
ZVALUE32_BT_mode <- loc1stats(ZVALUE32_BT, prob=0.95)[1]
library(VGAM)
library(locfit)
library(abc)
source("loc2plot.r")
ZVALUE32_BT_mode <- loc1stats(ZVALUE32_BT, prob=0.95)[1]
ZVALUE32_BT_mode
source("acceptRej.r")
source(calmod)
source("calmod.r")
source("make_pd2005.r")
ZVALUE32_BT_mode <- loc1stats(ZVALUE32_BT, prob=0.95)[1]
ZVALUE32_BT
ZVALUE32_BT_mode <- loc1stats(ZVALUE32_BT, prob=0.9)[1]
posterior$nevent
table(posterior$nevent)
hyperstat
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(posterior$nevent)
devtools::document()
load_all()
?CoExpansionValidation::assign_species_to_events
devtools::document()
devtools::document()
?CoExpansionValidation::generate_cotime_with_buffer
#' @export
species_exp_time<-function(species.assignment,exp.time){
nsp<-length(unlist(species.assignment))
sptime<-c()
for(l in 1:length(species.assignment)){
sptime<-c(sptime,rep(exp.time[l],length(species.assignment[[l]])))
}
names(sptime)<-unlist(species.assignment)
sptime<-sptime[order(names(sptime))]
return(sptime)
}
rm("species_exp_time")
load_all()
x<-species_exp_time(species.assignment,exp.time)
x
?plot.abc
?sum
load_all()
?CoExpansionValidation::generate_cotime_with_buffer
devtools::document()
?CoExpansionValidation::generate_cotime_with_buffer
?CoExpansionValidation::species_exp_time
devtools::document()
?CoExpansionValidation::species_exp_time
?reshape
devtools::document()
?CoExpansionValidation::run_bayeSCC_with_conf
?CoExpansionValidation::runbayeSCC_with_conf
a<-c(1,2,3)
a[c(0,0,1)]
load_all()
path_to_bayessc<-"BayeSSC.exe" #windows version, linux or mac starts with ./
configurefile<-"test.conf"
conf<-read.table(configurefile,header=T,sep="\t",stringsAsFactors = F)
head(conf)
#setting prefix is important
#temporary folders will be created for holding BayeSSC intermediate results
#these folders are named prefix+row number in conf
#the resulted "observed data" will return and write to a outfile
#named prefix_obs_file
#and the sampled configuration will be write into prefix_conf_file for records
#if conf already contain the eventtime.generation column
#species.assignment and exp.time can be skipped
#Set intern=FALSE if you want to check the screen output of BayeSCC
simulatedobs<-runbayeSSC_with_conf(BayeSSCallocation = path_to_bayessc,conf = conf,prefix = 'temp',species.assignment = species.assignment,exp.time = exp.time,intern=F)
simulatedobs
load_all()
devtools::document()
#setting prefix is important
#temporary folders will be created for holding BayeSSC intermediate results
#these folders are named prefix+row number in conf
#the resulted "observed data" will return and write to a outfile
#named prefix_obs_file
#and the sampled configuration will be write into prefix_conf_file for records
#if conf already contain the eventtime.generation column
#species.assignment and exp.time can be skipped
#Set intern=FALSE if you want to check the screen output of BayeSCC
simulatedobs<-runbayeSSC_with_conf(BayeSSCallocation = path_to_bayessc,conf = conf,prefix = 'temp',species.assignment = species.assignment,exp.time = exp.time,intern=F)
load_all()
devtools::document()
load_all()
devtools::document()
load_all()
devtools::document()
ls("package:CoExpansionValidation")
load_all()
devtools::document()
path_to_bayessc="BayeSSC.exe"
concentrationShape=20.0
concentrationscale=0.15
time.range<-c(30000,50000)
buffer<-500
npod<-10
configurefile<-'test.conf'
conf<-read.table(configurefile,header=T,sep="\t",stringsAsFactors = F)
load_all()
reference.table<-ABC_simulation_with_conf(npod=npod,conf=conf,time.range=time.range,buffer=buffer,concentrationscale=concentrationscale,concentrationShape=concentrationShape,BayeSSCallocation=path_to_bayessc,prefix='temp',do.parallel=2,write.reference.file = T)
load_all()
reference.table<-ABC_simulation_with_conf(npod=npod,conf=conf,time.range=time.range,buffer=buffer,concentrationscale=concentrationscale,concentrationShape=concentrationShape,BayeSSCallocation=path_to_bayessc,prefix='temp',do.parallel=2,write.reference.file = T)
reference.table
getwd()
?getwd
load_all()
reference.table<-ABC_simulation_with_conf(npod=npod,conf=conf,time.range=time.range,buffer=buffer,concentrationscale=concentrationscale,concentrationShape=concentrationShape,BayeSSCallocation=path_to_bayessc,prefix='temp',do.parallel=2,write.reference.file = T)
load_all()
reference.table<-ABC_simulation_with_conf(npod=npod,conf=conf,time.range=time.range,buffer=buffer,concentrationscale=concentrationscale,concentrationShape=concentrationShape,BayeSSCallocation=path_to_bayessc,prefix='temp',do.parallel=2,write.reference.file = T)
reference.table<-ABC_simulation_with_conf(npod=npod,conf=conf,time.range=time.range,buffer=buffer,concentrationscale=concentrationscale,concentrationShape=concentrationShape,BayeSSCallocation=path_to_bayessc,prefix='temp',do.parallel=2,write.reference.file = F)
reference.table
posterior
devtools::use_data(posterior)
usethis::use_data(posterior)
devtools::document()
load_all()
setwd("~/Work/R")
install.packages("CoExpansionValidation_0.1.0.tar.gz",repos = NULL)
setwd("~/Work/R")
install.packages()
install.packages("CoExpansionValidation_0.1.0.tar.gz",repos = NULL)
